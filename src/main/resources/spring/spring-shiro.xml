<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache.xml"/>
    </bean>

    <bean id="credentialsMatcher" class="com.flyingideal.security.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="cacheManager"/>
        <property name="hashIterations" value="${password.hashIterations}"/>
        <property name="hashAlgorithmName" value="${password.algorithmName}"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <bean id="userRealm" class="com.flyingideal.security.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <!--身份、权限的缓存会用到-->
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
    </bean>

    <bean id="sessionDAO" class="com.flyingideal.security.session.dao.MysqlSessionDAO">
        <constructor-arg ref="sessionMapper"/>
    </bean>

    <!-- 如果是web环境的话，即DefaultWebSecurityManager中配置的默认SessionManager为ServletContainerSessionManager -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDAO"/>
    </bean>

    <!-- 如果是web环境的话，即DefaultWebSecurityManager中配置的默认SessionStorageEvaluator就是DefaultWebSessionStorageEvaluator
         但sessionStorageEnabled为true，即会保存登录状态和登录人信息到session中，这里配置成false进行测试

         如果不希望将登录状态及登录人信息保存到session当中的话，可以将其设置为false，这样就需要每次请求携带身份信息或token了
    -->
    <bean id="sessionStorageEvaluator" class="org.apache.shiro.web.mgt.DefaultWebSessionStorageEvaluator">
        <property name="sessionStorageEnabled" value="false"/>
    </bean>

    <bean id="subjectDAO" class="org.apache.shiro.mgt.DefaultSubjectDAO">
        <!--<property name="sessionStorageEvaluator" ref="sessionStorageEvaluator"/>-->
    </bean>

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="cacheManager" ref="cacheManager"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="subjectDAO" ref="subjectDAO"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- 自定义身份验证过滤器，继承自FormAuthenticationFilter，用于处理ajax登录请求 -->
    <bean id="ajaxFormAuthenticationFilter" class="com.flyingideal.security.filter.AjaxFormAuthenticationFilter">
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <!--loginUrl可以在这里设置，也可以在ShiroFilterFactoryBean统一设置！-->
        <property name="loginUrl" value="/user/login"/>
    </bean>

    <bean id="ajaxRolesAuthorizationFilter" class="com.flyingideal.security.filter.AjaxRolesAuthorizationFilter"/>

    <bean id="corsFilter" class="com.flyingideal.security.filter.CORSFilter"></bean>

    <bean id="sslFilter" class="org.apache.shiro.web.filter.authz.SslFilter">
        <property name="port" value="8443"/>
    </bean>

    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/user/login"/>
        <property name="filters">
            <util:map>
                <!--<entry key="authc" value-ref="formAuthenticationFilter"/>-->
                <entry key="authc" value-ref="ajaxFormAuthenticationFilter"/>
                <!--<entry key="cors" value-ref="corsFilter"/>-->
                <entry key="roles" value-ref="ajaxRolesAuthorizationFilter"/>
                <entry key="ssl" value-ref="sslFilter"/>
            </util:map>
        </property>
        <!--<property name="filterChainDefinitions">
            <value>
                /assets/** = anon
                /css/** = anon
                /img/** = anon
                /js/** = anon
                /logout = anon
                /admin/** = authc,roles[admin]
            </value>
        </property>-->
    </bean>

    <bean id="dynamicPermissionService" class="com.flyingideal.security.dynamicPermission.DynamicPermissionServiceImpl">
        <property name="shiroFilter" ref="shiroFilter"/>
        <property name="addDefaultAllPatternFilter" value="true"/>
        <property name="definitions">
            <value>
                /user/login = anon
                /assets/** = anon
                /css/** = anon
                /img/** = anon
                /js/** = anon
                /logout = anon
            </value>
        </property>
    </bean>

    <!--Shiro生命周期处理-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>